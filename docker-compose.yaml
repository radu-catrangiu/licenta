version: "3.1"

services:
  nginx:
    image: valian/docker-nginx-auto-ssl
    restart: on-failure
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ssl_data:/etc/resty-auto-ssl
    environment:
      ALLOWED_DOMAINS: 'meet-up.go.ro'
      SITES: 'meet-up.go.ro=frontend:80'
    networks: 
        - net

  frontend:
    build:
      context: ./frontend/get_together/
      dockerfile: Dockerfile
    container_name: frontend
    networks: 
      - net
    ports:
      - 8081:80
    environment:
      NODE_ENV: "production"

  mongo:
    image: mongo
    # command: --smallfiles
    restart: always
    container_name: database
    ports:
      - 27017:27017
    expose:
      - 27017
    networks: 
      net:
        aliases:
          - database
    hostname: database
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - db_persistence:/data/db
      - ./database/config/:/init
      - ./database/init/:/docker-entrypoint-initdb.d

  mongo-express:
    image: mongo-express
    restart: always
    container_name: database-interface
    networks: 
      - net
    ports:
      - 9001:8081
    depends_on:
      - mongo
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example

  broker:
    image: eclipse-mosquitto:latest
    container_name: announce-broker
    ports:
      - 1883:1883
    networks:
      net:
        aliases:
          - broker
  
  core-users:
    build:
      context: ./backend/core_users/
      dockerfile: Dockerfile
    container_name: core-users
    networks: 
      - net
    depends_on:
      - mongo
      - broker
    environment:
      MONGO_HOST: database
      MONGO_USER: root
      MONGO_PASS: example
      MQTT_BROKER: mqtt://broker/
      ANNOUNCE_INTERVAL: 5000
      INSIDER_URL: http://insider:8089

  core-locations:
    build:
      context: ./backend/core_locations/
      dockerfile: Dockerfile
    container_name: core-locations
    networks: 
      - net
    depends_on:
      - mongo
      - broker
    environment:
      MONGO_HOST: database
      MONGO_USER: root
      MONGO_PASS: example
      MQTT_BROKER: mqtt://broker/
      PUSH_MQTT_BROKER: mqtt://push-broker/
      ANNOUNCE_INTERVAL: 5000
      INSIDER_URL: http://insider:8089

  core-venues:
    build:
      context: ./backend/core_venues/
      dockerfile: Dockerfile
    container_name: core-venues
    networks: 
      - net
    depends_on:
      - mongo
      - broker
    environment:
      MONGO_HOST: database
      MONGO_USER: root
      MONGO_PASS: example
      MQTT_BROKER: mqtt://broker/
      ANNOUNCE_INTERVAL: 5000
      INSIDER_URL: http://insider:8089

  core-groups:
    build:
      context: ./backend/core_groups/
      dockerfile: Dockerfile
    container_name: core-groups
    networks: 
      - net
    depends_on:
      - mongo
      - broker
    environment:
      MONGO_HOST: database
      MONGO_USER: root
      MONGO_PASS: example
      MQTT_BROKER: mqtt://broker/
      PUSH_MQTT_BROKER: mqtt://push-broker/
      ANNOUNCE_INTERVAL: 5000
      INSIDER_URL: http://insider:8089

  core-comments:
    build:
      context: ./backend/core_comments/
      dockerfile: Dockerfile
    container_name: core-comments
    networks: 
      - net
    depends_on:
      - mongo
      - broker
    environment:
      MONGO_HOST: database
      MONGO_USER: root
      MONGO_PASS: example
      MQTT_BROKER: mqtt://broker/
      PUSH_MQTT_BROKER: mqtt://push-broker/
      ANNOUNCE_INTERVAL: 5000
      INSIDER_URL: http://insider:8089

  core-notifications:
    build:
      context: ./backend/core_notifications/
      dockerfile: Dockerfile
    container_name: core-notifications
    networks: 
      - net
    depends_on:
      - mongo
      - broker
    environment:
      MONGO_HOST: database
      MONGO_USER: root
      MONGO_PASS: example
      MQTT_BROKER: mqtt://broker/
      PUSH_MQTT_BROKER: mqtt://push-broker/
      ANNOUNCE_INTERVAL: 5000
      INSIDER_URL: http://insider:8089

  core-tokens:
    build:
      context: ./backend/core_tokens/
      dockerfile: Dockerfile
    container_name: core-tokens
    networks: 
      - net
    depends_on:
      - mongo
      - broker
    environment:
      MONGO_HOST: database
      MONGO_USER: root
      MONGO_PASS: example
      REDIS_HOST: redis-tokens
      REDIS_PASS: password
      REDIS_PORT: 6379
      MQTT_BROKER: mqtt://broker/
      ANNOUNCE_INTERVAL: 5000
      INSIDER_URL: http://insider:8089

  insider:
    build:
      context: ./backend/insider/
      dockerfile: Dockerfile
    container_name: insider
    networks:
      net:
        aliases:
          - insider
    ports:
      - 3333:8089
    depends_on:
      - broker
    environment:
      MQTT_BROKER: mqtt://broker/
      ANNOUNCE_INTERVAL: 300000

  profile-picture-manager:
    build:
      context: ./backend/profile_picture_manager/
      dockerfile: Dockerfile
    container_name: profile-picture-manager
    networks: 
      - net
    depends_on:
      - mongo
      - broker
    environment:
      MONGO_HOST: mongo
      MONGO_USER: root
      MONGO_PASS: example
      MQTT_BROKER: mqtt://broker/
      ANNOUNCE_INTERVAL: 5000
      INSIDER_URL: http://insider:8089
    volumes:
      - profile_pictures_storage:/usr/src/app/pictures

  push-broker:
    image: eclipse-mosquitto:latest
    container_name: push-broker
    ports:
      - 1884:1883
    expose:
      - 1883
    networks:
      net:
        aliases:
          - push-broker

  push-system:
    build:
      context: ./backend/push_system/
      dockerfile: Dockerfile
    container_name: push-system
    networks: 
      - net
    depends_on:
      - push-broker
    ports:
      - 6969:6969
    environment:
      PUSH_MQTT_BROKER: mqtt://push-broker/
      PORT: 6969
      MQTT_BROKER: mqtt://broker/
      INSIDER_URL: http://insider:8089
      ANNOUNCE_INTERVAL: 5000
  
  redis-tokens:
    image: redis
    container_name: redis-tokens
    hostname: redis-tokens
    expose:
      - 6379
    ports:
      - 6379:6379
    networks:
      net:
        aliases:
          - redis-tokens

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=redis-tokens
    ports:
      - 9002:8081
    networks:
      - net

volumes:
  db_persistence:
  profile_pictures_storage:
  ssl_data:
  

networks: 
  net:
  